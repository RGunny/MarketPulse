# ========================================
# Event Detection Service Configuration
# ========================================

spring:
  application:
    name: event-detection
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
    
  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 3000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
    
    # MongoDB 설정
    mongodb:
      uri: mongodb://${MONGO_USERNAME:marketpulse_user}:${MONGO_PASSWORD:marketpulse_password}@${MONGO_HOST:localhost}:${MONGO_PORT:27017}/${MONGO_DATABASE:marketpulse}?authSource=${MONGO_DATABASE:marketpulse}
      auto-index-creation: true

# 암호화 설정
app:
  encryption:
    enabled: true  # CryptoService Bean 활성화
    master-key: ${MASTER_ENCRYPTION_KEY:a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456}

server:
  port: 8081

# ===== KIS API 설정 =====
market-data:
  kis:
    enabled: true
    base-url: https://openapi.koreainvestment.com:9443
    app-key: ${KIS_APP_KEY:PSJl1bIxRyo5KfRppyzDkgOvC7bnH11aNvpJ}
    app-secret: ${KIS_APP_SECRET:JVhukuuD873hc1Lq8uRXmpYBvLJTyFg6xi+LZD0J6Htaqq+dMBaqdD1yoLdsAAXSFsCKQd9da+LjkPPh4M+sxsQmk5az2TzBfysA8hsfGgB6Fz7gFsyychqP4bkZihRTF7gERsY1QFeHTXEpxpFOUhunQGtyxDIBOoRx2Z/gIzWwbKmWJvU=}
    
    # API 경로 설정
    stock-price-transaction-id: FHKST01010100
    stock-master-transaction-id: CTPF1702R
    grant-type: client_credentials
    token-path: /oauth2/tokenP
    stock-price-path: /uapi/domestic-stock/v1/quotations/inquire-price
    stock-master-path: /uapi/domestic-stock/v1/quotations/search-info
    health-path: /oauth2/tokenP
    
    # 시장별 상품 코드
    market-product-codes:
      kospi: "300"
      kosdaq: "301"
      konex: "302"
    
    # 헤더 설정
    headers:
      transaction-id: tr_id
      continuation-key: tr_cont
      cust-type: custtype
      personal-customer-type: P
      content-type: application/json; charset=utf-8
    
    # 타임아웃 설정
    timeouts:
      connection-timeout-seconds: 10
      read-timeout-seconds: 30
      write-timeout-seconds: 30
      response-timeout-seconds: 60

# ===== MarketPulse 비즈니스 설정 =====
marketpulse:
  # 알림 임계값
  alert:
    price:
      rise-threshold: 0.5         # 급등 알림 임계값 (%)
      fall-threshold: -0.5        # 급락 알림 임계값 (%)
      limit-up-threshold: 29.5    # 상한가 알림 임계값 (%)
      limit-down-threshold: -29.5 # 하한가 알림 임계값 (%)
  
  # 시장 순위 수집 설정
  market-ranking:
    enabled: true                        # 순위 수집 활성화
    auto-watch:
      enabled: true                      # 자동 WatchTarget 등록 활성화
      price-rise-limit: 10               # 상승률 상위 N위까지 자동 등록
      price-fall-limit: 10               # 하락률 상위 N위까지 자동 등록
      volume-surge-limit: 5              # 거래량 상위 N위까지 자동 등록
      priority: 2                        # 자동 등록 종목 우선순위
      collect-interval-seconds: 60       # 수집 주기 (초)
    schedule:
      kospi-cron: "0 */10 9-15 * * MON-FRI"    # KOSPI 순위 수집 (10분마다)
      kosdaq-cron: "0 5-55/10 9-15 * * MON-FRI" # KOSDAQ 순위 수집 (10분마다)
      anomaly-cron: "0 */5 9-15 * * MON-FRI"    # 이상 종목 감지 (5분마다)
      morning-cron: "0 1 9 * * MON-FRI"         # 장 시작 초기 수집
      cleanup-cron: "0 0 3 * * *"               # 오래된 데이터 정리
    retention-days: 7                           # 데이터 보관 기간 (일)
  
  # 종목 마스터 동기화 설정
  stock-master:
    sync:
      enabled: false                      # 동기화 활성화
      mode: INCREMENTAL                   # 기본 동기화 모드
      full-sync-cron: "0 0 2 * * *"      # 전체 동기화: 매일 새벽 2시
      incremental-sync-cron: "0 0 * * * *" # 증분 동기화: 매시간
      kospi-sync-cron: "0 0 3 * * *"     # KOSPI 동기화: 매일 새벽 3시
      kosdaq-sync-cron: "0 30 3 * * *"   # KOSDAQ 동기화: 매일 새벽 3시 30분
      batch-size: 100                    # 배치 처리 크기
      batch-delay-ms: 100                # 배치 간 지연 (밀리초)
      api-timeout-seconds: 30            # API 타임아웃
      max-retry-attempts: 3              # 최대 재시도 횟수
      kospi-sync-enabled: false          # KOSPI 개별 동기화
      kosdaq-sync-enabled: false         # KOSDAQ 개별 동기화
      failure-threshold: 10.0            # 실패 임계값 (%)
      notification-enabled: true         # 결과 알림

# 이벤트 감지 설정 (Legacy - 향후 제거 예정)
event-detection:
  enabled: false
  thresholds:
    price-spike-percent: 5.0    # 5% 이상 급등
    price-drop-percent: -5.0    # 5% 이상 급락
    volume-surge-ratio: 2.0     # 평균 대비 200% 이상
  scheduler:
    interval: 30s               # 30초마다 감지

# Resilience4j Circuit Breaker 설정
resilience:
  circuit-breaker:
    failure-rate-threshold: 30                    # 30% 실패율에서 Open  
    slow-call-rate-threshold: 50                  # 50% 느린 호출에서 Open
    slow-call-duration-threshold: 10s             # 10초 이상이면 느린 호출  
    permitted-number-of-calls-in-half-open-state: 5
    sliding-window-size: 50
    sliding-window-type: COUNT_BASED
    minimum-number-of-calls: 5
    wait-duration-in-open-state: 30s              # Open 상태 30초 유지 (빠른 복구)
    automatic-transition-from-open-to-half-open-enabled: true  # 자동 전환 활성화
    record-exceptions: true
    register-health-indicator: true

# Actuator 설정 (Circuit Breaker 모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,circuitbreakers,circuitbreakerevents
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  metrics:
    tags:
      application: event-detection

# gRPC 클라이언트 설정
grpc:
  client:
    notification:
      address: 'static://localhost:9082'
      negotiationType: plaintext